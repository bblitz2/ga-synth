
close all;
clear vars;
%% Read in sound files to find durations
filenames = [
    "Trumpet.novib.ff.C6.stereo.aiff", ...
    "Viola.arco.ff.sulG.C4.stereo.aif", ...
    "Oboe.ff.A4.stereo.aiff", ...
    "Horn.ff.C4.stereo.aif", ...
    "AltoSax.NoVib.ff.C4.stereo.aif", ...
    "Bass.arco.ff.sulD.C3.stereo.aif", ...
    "Bassoon.ff.C3.stereo.aif", ...
    "Cello.arco.ff.sulG.C4.stereo.aif", ...
    "EbClarinet.ff.C4.stereo.aif", ...
    "Flute.nonvib.ff.C5.stereo.aif", ...
    "TenorTrombone.ff.C4.stereo.aif", ...
    "Tuba.ff.C3.stereo.aif", ...
    "Violin.arco.ff.sulG.C5.stereo.aif", ...
];
fs = 44100;
durs = [];
for fname = filenames
    x = audioread(fullfile("sounds",fname));
    durs = [durs length(x)/fs];
end
durs = repelem(durs, 3);
% errscale = 2 ./ durs';
errscale = 1; % NOTE: don't use errscale for now

%% Plot convergence results
load("results_4_29.mat");
results1 = results;
load("results_4_29_1.mat");
results2 = results;

results1(9*6+1:10*6) = results2;

rtab = struct2table(results1)

convergence_table = array2table([
    median(rtab(rtab.fm_method_idx == 1,:).fval.*errscale) ...
    mean(rtab(rtab.fm_method_idx == 1,:).fval.*errscale) ...
    std(rtab(rtab.fm_method_idx == 1,:).fval.*errscale) ...
    median(rtab(rtab.fm_method_idx == 2,:).fval.*errscale) ...
    mean(rtab(rtab.fm_method_idx == 2,:).fval.*errscale) ...
    std(rtab(rtab.fm_method_idx == 2,:).fval.*errscale);

    median([rtab(rtab.fm_method_idx == 1,:).output.generations]) ...
    mean([rtab(rtab.fm_method_idx == 1,:).output.generations]) ...
    std([rtab(rtab.fm_method_idx == 1,:).output.generations]) ...
    median([rtab(rtab.fm_method_idx == 2,:).output.generations]) ...
    mean([rtab(rtab.fm_method_idx == 2,:).output.generations]) ...
    std([rtab(rtab.fm_method_idx == 2,:).output.generations]) ...
])


kI1 = cell2mat(cellfun( ...
    @(x) reshape(x,2,[]), ...
    [rtab(rtab.fm_method_idx == 1,:).best_chrom], ...
    'UniformOutput',false ...
)')';

kI2 = cell2mat(cellfun( ...
    @(x) reshape(x,2,[]), ...
    [rtab(rtab.fm_method_idx == 2,:).best_chrom], ...
    'UniformOutput',false ...
)')';

figure;
xlabels = ["k (ClassicFM)" "k (ModFM)" "I (ClassicFM)" "I (ModFM)"];
boxplot([kI1(:,1) kI2(:,1) kI1(:,2) kI2(:,2)],xlabels,'Whisker',1);

figure;
boxplot([ ...
    rtab(rtab.fm_method_idx == 1 & rtab.Nc == 2,:).fval ...
    rtab(rtab.fm_method_idx == 1 & rtab.Nc == 4,:).fval ...
    rtab(rtab.fm_method_idx == 1 & rtab.Nc == 6,:).fval ...
    rtab(rtab.fm_method_idx == 2 & rtab.Nc == 2,:).fval ...
    rtab(rtab.fm_method_idx == 2 & rtab.Nc == 4,:).fval ...
    rtab(rtab.fm_method_idx == 2 & rtab.Nc == 6,:).fval ...
    ], ...
    ["2 (ClassicFM)" "4 (ClassicFM)" "6 (ClassicFM)" "2 (ModFM)" "4 (ModFM)" "6 (ModFM)"], ...
    'Whisker',1);
xlabel("Nc");
ylabel("Best Fitness");
title("Fitness Distribution");